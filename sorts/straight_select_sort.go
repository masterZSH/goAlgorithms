package sorts

//-----------
//直接选择排序
//每一次从待排序的数据元素中选出最小（或最大）的一个元素，
//存放在序列的起始位置，直到全部待排序的数据元素排完
//时间复杂度
//比较次数O(n^2），比较次数与关键字的初始状态无关，
//总的比较次数N=(n-1）+(n-2）+…+1=n*(n-1）/2。
//交换次数O(n），最好情况是，已经有序，交换0次；
//最坏情况下，即待排序记录初始状态是按第一条记录最大，之后的记录从小到大顺序排列，
//则需要移动记录的次数最多为3（n-1），逆序交换n/2次。
//-----------
func straightSelectSort(arr []int) []int {
	for i := 0; i < len(arr); i++ {
		// 初始化最小值索引
		temp := i
		for j := i + 1; j < len(arr); j++ {
			//temp是 j+1->len(arr)数组中的最小值key
			if arr[temp] > arr[j] {
				temp = j
			}
		}
		swap(arr, i, temp)
	}
	return arr
}
